#cloud-config

---
hostname: nspawnlet-dev
write_files:
  - path: /opt/bin/wupiao
    permissions: '0755'
    content: |
      #!/bin/bash
      # [w]ait [u]ntil [p]ort [i]s [a]ctually [o]pen
      [ -n "$1" ] && [ -n "$2" ] && while ! curl --output /dev/null \
      --silent --head --fail \
      http://${1}:${2}; do sleep 1 && echo -n .; done;
      exit $?
coreos:
  etcd2:
    name: nspawnlet
    listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001
    advertise-client-urls: http://$private_ipv4:2379,http://$private_ipv4:4001
    initial-cluster-token: k8s_etcd
    listen-peer-urls: http://$private_ipv4:2380,http://$private_ipv4:7001
    initial-advertise-peer-urls: http://$private_ipv4:2380
    initial-cluster: master=http://$private_ipv4:2380
    initial-cluster-state: new
  fleet:
    metadata: "role=master"
  units:
    - name: rpc-statd.service
      command: start
      enable: true

    - name: early-docker.socket
      command: start
      enable: true
      content: |
        [Unit]
        Description=Early Docker Socket for the API
        [Socket]
        ListenStream=/var/run/early-docker.sock
        [Install]
        WantedBy=sockets.target

    - name: early-docker.service
      command: start
      content: |
        [Unit]
        Description=Early Docker Application Container Engine
        Documentation=http://docs.docker.com
        After=early-docker.socket
        Requires=early-docker.socket
        [Service]
        Environment=TMPDIR=/var/tmp
        MountFlags=slave
        LimitNOFILE=1048576
        LimitNPROC=1048576
        ExecStart=/usr/bin/docker --daemon --host=fd:// --bridge=none --iptables=false --ip-masq=false --graph=/var/lib/early-docker --pidfile=/var/run/early-docker.pid
        [Install]
        WantedBy=early-docker.target

    - name: setup-network-environment.service
      command: start
      content: |
        [Unit]
        Description=Setup Network Environment
        Documentation=https://github.com/kelseyhightower/setup-network-environment
        Requires=network-online.target
        After=network-online.target
        [Service]
        ExecStartPre=-/usr/bin/mkdir -p /opt/bin
        ExecStartPre=/usr/bin/curl -L -o /opt/bin/setup-network-environment -z /opt/bin/setup-network-environment https://github.com/kelseyhightower/setup-network-environment/releases/download/v1.0.1/setup-network-environment
        ExecStartPre=/usr/bin/chmod +x /opt/bin/setup-network-environment
        ExecStart=/opt/bin/setup-network-environment
        RemainAfterExit=yes
        Type=oneshot

    - name: fleet.service
      command: start

    - name: flanneld.service
      command: start
      content: |
        [Unit]
        Description=Run flannel
        Documentation=https://github.com/coreos/flannel
        Requires=etcd2.service network-online.target
        After=etcd2.service
        [Service]
        ExecStartPre=/usr/bin/curl -L -o /opt/bin/flannel-0.6.2-linux-amd64.tar.gz -z /opt/bin/flannel-0.6.2-linux-amd64.tar.gz https://github.com/coreos/flannel/releases/download/v0.6.2/flannel-0.6.2-linux-amd64.tar.gz
        ExecStartPre=/usr/bin/tar -C /opt/bin -xzvf /opt/bin/flannel-0.6.2-linux-amd64.tar.gz
        ExecStartPre=/usr/bin/mv /opt/bin/flannel-0.6.2/flanneld /opt/bin/flanneld
        ExecStartPre=/usr/bin/rm -rf /opt/bin/flannel-0.6.2
        ExecStartPre=/usr/bin/rm -rf /opt/bin/flannel-0.6.2-linux-amd64.tar.gz
        ExecStart=/opt/bin/flanneld
      drop-ins:
        - name: 50-network-config.conf
          content: |
            [Unit]
            Requires=etcd2.service
            [Service]
            ExecStartPre=/usr/bin/etcdctl set /coreos.com/network/config '{"Network":"10.244.0.0/16", "Backend": {"Type": "vxlan"}}'

    - name: docker-cache.service
      command: start
      content: |
        [Unit]
        Description=Docker cache proxy
        Requires=early-docker.service
        After=early-docker.service
        Before=early-docker.target
        [Service]
        Restart=always
        TimeoutStartSec=0
        RestartSec=5
        Environment="TMPDIR=/var/tmp/"
        Environment="DOCKER_HOST=unix:///var/run/early-docker.sock"
        ExecStart=/usr/bin/docker events

    - name: kube-apiserver.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes API Server
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=etcd2.service setup-network-environment.service
        After=etcd2.service setup-network-environment.service
        [Service]
        EnvironmentFile=/etc/network-environment
        ExecStartPre=-/usr/bin/mkdir -p /opt/bin
        ExecStartPre=/usr/bin/curl -L -o /opt/bin/kube-apiserver -z /opt/bin/kube-apiserver https://storage.googleapis.com/kubernetes-release/release/v1.4.6/bin/linux/amd64/kube-apiserver
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-apiserver
        ExecStartPre=/usr/bin/curl -L -o /opt/bin/kubectl -z /opt/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/v1.4.6/bin/linux/amd64/kubectl
        ExecStartPre=/usr/bin/chmod 755 /opt/bin/kubectl
        ExecStart=/opt/bin/kube-apiserver --portal_net=10.244.0.0/16 --etcd_servers=http://127.0.0.1:2379 --logtostderr=true --insecure_port=8080 --insecure_bind_address=0.0.0.0 --cloud-provider=gce
        Restart=always
        RestartSec=10
    - name: kube-controller-manager.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Controller Manager
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=kube-apiserver.service
        After=kube-apiserver.service
        [Service]
        ExecStartPre=/usr/bin/curl -L -o /opt/bin/kube-controller-manager -z /opt/bin/kube-controller-manager https://storage.googleapis.com/kubernetes-release/release/v1.4.6/bin/linux/amd64/kube-controller-manager
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-controller-manager
        ExecStart=/opt/bin/kube-controller-manager --master=127.0.0.1:8080 --logtostderr=true --cloud-provider=gce
        Restart=always
        RestartSec=10
    - name: kube-scheduler.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Scheduler
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=kube-apiserver.service
        After=kube-apiserver.service
        [Service]
        ExecStartPre=/usr/bin/curl -L -o /opt/bin/kube-scheduler -z /opt/bin/kube-scheduler https://storage.googleapis.com/kubernetes-release/release/v1.4.6/bin/linux/amd64/kube-scheduler
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-scheduler
        ExecStart=/opt/bin/kube-scheduler --master=127.0.0.1:8080
        Restart=always
        RestartSec=10
    - name: docker.service
      command: start
      content: |
        [Unit]
        Description=Docker Application Container Engine
        Documentation=http://docs.docker.com
        After=docker.socket early-docker.target network.target flanneld.service
        Requires=docker.socket early-docker.service flanneld.service
        [Service]
        Environment=TMPDIR=/var/tmp
        EnvironmentFile=-/run/flannel/subnet.env
        EnvironmentFile=/etc/network-environment
        MountFlags=slave
        LimitNOFILE=1048576
        LimitNPROC=1048576
        ExecStart=/usr/bin/docker --daemon --bip=${FLANNEL_SUBNET} --mtu=${FLANNEL_MTU}
        [Install]
        WantedBy=multi-user.target
      drop-ins:
        - name: 51-docker-mirror.conf
          content: |
            [Service]
            Environment=DOCKER_OPTS='--registry-mirror=https://us.gcr.io'
    - name: kube-proxy.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Proxy
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=setup-network-environment.service
        After=setup-network-environment.service
        [Service]
        ExecStartPre=/usr/bin/curl -L -o /opt/bin/kube-proxy -z /opt/bin/kube-proxy https://storage.googleapis.com/kubernetes-release/release/v1.4.6/bin/linux/amd64/kube-proxy
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-proxy
        # wait for kubernetes master to be up and ready
        ExecStartPre=/opt/bin/wupiao 127.0.0.1 8080
        ExecStart=/opt/bin/kube-proxy\
        --master=http://127.0.0.1:8080 \
        --logtostderr=true
        Restart=always
        RestartSec=10
    # - name: kube-kubelet.service
    #   command: start
    #   content: |
    #     [Unit]
    #     Description=Kubernetes Kubelet
    #     Documentation=https://github.com/GoogleCloudPlatform/kubernetes
    #     Requires=setup-network-environment.service kube-proxy.service
    #     After=setup-network-environment.service kube-proxy.service
    #     [Service]
    #     EnvironmentFile=/etc/network-environment
    #     ExecStartPre=/usr/bin/curl -L -o /opt/bin/kubelet -z /opt/bin/kubelet https://storage.googleapis.com/kubernetes-release/release/v1.2.4/bin/linux/amd64/kubelet
    #     ExecStartPre=/usr/bin/chmod +x /opt/bin/kubelet
    #     # wait for kubernetes master to be up and ready
    #     ExecStartPre=/opt/bin/wupiao 127.0.0.1 8080
    #     ExecStart=/opt/bin/kubelet \
    #     --address=0.0.0.0 \
    #     --port=10250 \
    #     --hostname_override=sg-kube-3 \
    #     --api_servers=http://127.0.0.1:8080 \
    #     --allow_privileged=true \
    #     --logtostderr=true \
    #     --healthz_bind_address=0.0.0.0 \
    #     --healthz_port=10248
    #     --cloud-provider=gce
    #     Restart=always
    #     RestartSec=10
  update:
    group: stable
    reboot-strategy: off
